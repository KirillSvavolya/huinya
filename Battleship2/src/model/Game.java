package model;

import java.util.Timer;
import java.util.TimerTask;

import model.ExceptionCollections.IllegalCoordinateException;

public class Game {

	private ServerField humanfield;
	private ServerField botfield;
	private AI bot;
	private boolean first;
	private ShotState botfeedback;
	private int[] lastbotturn = new int[2];
	
	public Game(int[][] board) {
		this.humanfield = new ServerField(board, "1");
		this.bot = new AI();
		this.botfield = new ServerField(bot.getField(), "2");
		this.first = true;
	}

	
	public ShotState countTurn(int[] turn) throws IllegalCoordinateException {
			ShotState shot = ShotState.HIT;
			
			if (turn[0] != 20 ) {
				shot = botfield.getResultOfTheShot(turn[0],turn[1]);
			}
		
			return shot;
		
		
	}
	

	


	// we call compterTurn to get a new turn generated by the bot
	//and we store his new turn for the next turn
	public int[] getComputerTurn() throws IllegalCoordinateException {
		int[] botturn;
		
		if (first) {
			botturn = bot.firstturn;
			botfeedback = humanfield.getResultOfTheShot(botturn[0],botturn[1]);
			this.lastbotturn[0]=botturn[0];
			this.lastbotturn[1]=botturn[1];
			first = false;
		}
		else { 
			botturn = bot.computerTurn(botfeedback, lastbotturn[0], lastbotturn[1]); //based on the previous move bot makes his turn
			botfeedback = humanfield.getResultOfTheShot(botturn[0],botturn[1]); //we keep the result of his turn to further give it back to bot
			this.lastbotturn[0]=botturn[0];
			this.lastbotturn[1]=botturn[1];
		}
		
		return botturn;
		
	}

	public ShotState getShotState() throws IllegalCoordinateException {
		
		
		return this.botfeedback;
	}
	public int[][] getBotfield(){
		return this.botfield.getBoard();
	}
	

	//public void analyseString(){} needs to be implemented for server
}
